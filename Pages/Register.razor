@page "/register"
@using HotelLibrary
@using System.ComponentModel.DataAnnotations
@using Hotel_Frontend.Models
@using Hotel_Frontend.Services
@using HttpClientImpl
@using Newtonsoft.Json
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavManager
@inject IReservationService ReservationService




<div class="card m-3">
    <h3 class="card-header">Register</h3>
    <div class="card-body">
        <EditForm EditContext="@_editContext" OnValidSubmit="Callback" @onreset="HandleReset">
            <DataAnnotationsValidator />
            <div class="form-row">
                <label>Name</label>
                <InputText @bind-Value="_customer.CustomerName" class="form-control" />
                <ValidationMessage For="@(() => _customer.CustomerName)"/>
            </div>
            <div class="form-row">
                <label>Username</label>
                <InputText @bind-Value="_customer.Username" class="form-control" />
                <ValidationMessage For="@(() => _customer.Username)"/>
            </div>
            <div class="form-row">
                <label>Password</label>
                <InputText @bind-Value="_customer.Password" type="password" class="form-control"/>
                <ValidationMessage For="@(() => _customer.Password)"/>
            </div>
            <div class="form-row form-check">
                <label>Repeat password</label>
                <InputText type="password" @bind-Value="_customer.RepeatPassword" class="form-control"/>
                <ValidationMessage For="@(() => _customer.RepeatPassword)"/>
            </div>
            <div class="text-center">
                <button type="submit" class="btn btn-primary mr-1">Submit</button>
                <button type="reset" class="btn btn-secondary">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private Model _customer = new Model();
    private EditContext _editContext;
    private string FixedUri = "http://localhost:5000";

    protected override void OnInitialized()
    {
        if (AuthenticationService.User != null)
        {
            NavManager.NavigateTo("/mysite");
        }
        _editContext = new EditContext(_customer);
    }

    private async void Callback()
    {
        await AuthenticationService.RegisterModel(_customer);
        //Reservation saved in memory while registering customer.
        NavManager.NavigateTo(ReservationService.Reservation != null ? "/confirmation" : "/mysite");
    }

    private void HandleReset()
    {
        _customer = new Model();
        _editContext = new EditContext(_customer);
    }
}
